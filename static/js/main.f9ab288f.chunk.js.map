{"version":3,"sources":["components/Navbar.jsx","components/PageBody.jsx","pages/Homepage.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","React","Component","PageBody","class","Homepage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6SAGqBA,G,6KAEjB,OACE,6BACE,yBAAKC,UAAU,6DACb,uBAAGA,UAAU,uBAAuBC,KAAK,IAAzC,cAGA,4BACED,UAAU,iBACVE,KAAK,SACLC,cAAY,WACZC,cAAY,0BACZC,gBAAc,yBACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMP,UAAU,+B,GAjBQQ,IAAMC,YCArBC,G,6KAEjB,OACE,6BACE,yBAAKC,MAAM,yFACT,yBAAKA,MAAM,gCACT,wBAAIA,MAAM,2CAAV,6BAGA,uBAAGA,MAAM,sCACP,wBAAIA,MAAM,kDACR,wBAAIA,MAAM,yCAAV,iBAGA,wBAAIA,MAAM,yCAAV,qBAGA,wBAAIA,MAAM,yCAAV,oBAGA,wBAAIA,MAAM,yCAAV,6BAKJ,uBAAGA,MAAM,sCAAT,sBACA,uBACEA,MAAM,sCACNV,KAAK,iCAFP,WAOF,yBAAKU,MAAM,+CACX,yBAAKA,MAAM,sE,GAlCiBH,IAAMC,YCCvBG,E,uKAEjB,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAL8BJ,IAAMC,WCQ7BI,MARf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,QCKcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f9ab288f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Navbar.css\";\n\nexport default class Navbar extends React.Component {\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand-lg navbar-dark blackColor text-light\">\n          <a className=\"navbar-brand mx-auto\" href=\"\">\n            McaupyBugs\n          </a>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n        </nav>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./PageBody.css\";\n\nexport default class PageBody extends React.Component {\n  render() {\n    return (\n      <div>\n        <div class=\"position-relative overflow-hidden p-3 p-md-5 m-md-3 text-center blackColor text-light\">\n          <div class=\"col-md-5 p-lg-5 mx-auto my-5\">\n            <h1 class=\"display-5 text-light font-weight-normal\">\n              Vishal Yadav [Mcaupybugs]\n            </h1>\n            <p class=\"lead text-light font-weight-normal\">\n              <ul class=\"text-light list-group list-group-horizontal-xl\">\n                <li class=\"blackColor text-light list-group-item\">\n                  Web Developer\n                </li>\n                <li class=\"blackColor text-light list-group-item\">\n                  Android Developer\n                </li>\n                <li class=\"list-group-item blackColor text-light\">\n                  Machine Learning\n                </li>\n                <li class=\"list-group-item blackColor text-light\">\n                  Competitive Programming\n                </li>\n              </ul>\n            </p>\n            <p class=\"lead text-light font-weight-normal\">A lot more to come</p>\n            <a\n              class=\"btn btn-light btn-outline-secondary\"\n              href=\"https://github.com/mcaupybugs\"\n            >\n              Github\n            </a>\n          </div>\n          <div class=\"product-device shadow-sm d-none d-md-block\"></div>\n          <div class=\"product-device product-device-2 shadow-sm d-none d-md-block\"></div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Navbar from \"../components/Navbar\";\nimport PageBody from \"../components/PageBody\";\n\nexport default class Homepage extends React.Component {\n  render() {\n    return (\n      <div>\n        <Navbar></Navbar>\n        <PageBody></PageBody>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Homepage from \"./pages/Homepage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Homepage></Homepage>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}